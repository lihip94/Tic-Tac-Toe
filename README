Game Structure:

The Tic-Tac-Toe game is implemented as a RESTful API using Flask.
The game board is represented as a list of 9 cells, where each cell can be either "X", "O", or empty (" ").
Entities:

    Flask API: The Flask application serves as the backend API for the Tic-Tac-Toe game.
               It defines the routes and handlers for different API endpoints.

    Game Board: The game board is represented as a list of 9 cells.
                Each cell contains the symbol:
                 "X", "O" - the player who made a move.
                 " " - an empty cell if the cell is not yet occupied.

Basic Flow:

    The game starts with an empty game board.
    The server exposes an API endpoint to get the game board and status.
    When this endpoint is accessed, it checks if there is a winner or if the game is a tie.
    If not, it returns the current game board and the status as "Game in progress".
    The server exposes another API endpoint to update a player's move.
    It expects the cell index and player symbol in the JSON body request.
    The server validates the input and checks if it's a valid move and if it's the correct player's turn.
    If the move is valid, it updates the game board with the player's symbol and changes the turn to the next player.
    After each move, the server checks for a winner by examining the winning combinations (rows, columns, and diagonals) on the game board.
    If a winning combination is found, the server declares the winning player as the winner and returns the game board and the status as "Player [symbol] wins!".
    If no winner is found but all cells are filled, the game is declared a tie and the server returns the game board and the status as "It's a tie!".
    The game continues until a player wins or it ends in a tie.

Running the Game:

Server-side:

    Install Python if you don't have it already.
    Download the backend directory for your project and navigate to it.
    Install Flask by running: pip install flask
    Run the Flask application by executing: python main.py
    The server will start, and you can now access the API endpoints.

Client-side (HTTP Requests):

    You can use tools like Postman to send HTTP requests to the server.
    Use the following endpoints:
        GET - to get the game board and status: GET http://localhost:5000/api/board

        PUT - to update a player's move: PUT http://localhost:5000/api/move with the JSON.
        JSON for example
            {
                "player": "X",
                "move":7
            }